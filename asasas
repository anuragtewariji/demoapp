class Lineage {
  source: string;
  destination: string;

  constructor(source: string, destination: string) {
    this.source = source;
    this.destination = destination;
  }
}

function forwardSequence(lineageObject: Lineage, lineageList: Lineage[]): boolean {
  let currentLineage: Lineage | null = lineageObject;
  let visited = new Set<string>(); // Track visited nodes to avoid infinite loops

  // Traverse the lineage sequence
  while (currentLineage) {
    // Check if the current lineage's destination is 'XXXY'
    if (currentLineage.destination === "XXXY") {
      return true;
    }

    // Prevent cycles
    if (visited.has(currentLineage.source)) {
      return false;
    }
    visited.add(currentLineage.source);

    // Find the next lineage in the sequence where the source matches the current destination
    currentLineage = lineageList.find((l) => l.source === currentLineage.destination) || null;
  }

  return false;
}

function backwardSequence(lineageObject: Lineage, lineageList: Lineage[]): boolean {
  let currentLineage: Lineage | null = lineageObject;
  let visited = new Set<string>(); // To prevent infinite loops

  while (currentLineage) {
    // If we reach an object where source is 'XXXY', return true
    if (currentLineage.source === "XXXY") {
      return true;
    }

    // Prevent cycles
    if (visited.has(currentLineage.source)) {
      return false;
    }
    visited.add(currentLineage.source);

    // Find the next lineage where the destination matches the current source
    currentLineage = lineageList.find((l) => l.destination === currentLineage.source) || null;
  }

  return false;
}
